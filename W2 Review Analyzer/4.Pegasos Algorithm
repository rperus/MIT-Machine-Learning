{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "61d06f92",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "14ca2362",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nProperly updates the classification parameter, theta and theta_0, on a\\nsingle step of the Pegasos algorithm\\n\\nArgs:\\n    feature_vector - A numpy array describing a single data point.\\n    label - The correct classification of the feature vector.\\n    L - The lamba value being used to update the parameters.\\n    eta - Learning rate to update parameters.\\n    current_theta - The current theta being used by the Pegasos\\n        algorithm before this update.\\n    current_theta_0 - The current theta_0 being used by the\\n        Pegasos algorithm before this update.\\n\\nReturns: A tuple where the first element is a numpy array with the value of\\ntheta after the current update has completed and the second element is a\\nreal valued number with the value of theta_0 after the current updated has\\ncompleted.\\n'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "    \"\"\"\n",
    "    Properly updates the classification parameter, theta and theta_0, on a\n",
    "    single step of the Pegasos algorithm\n",
    "\n",
    "    Args:\n",
    "        feature_vector - A numpy array describing a single data point.\n",
    "        label - The correct classification of the feature vector.\n",
    "        L - The lamba value being used to update the parameters.\n",
    "        eta - Learning rate to update parameters.\n",
    "        current_theta - The current theta being used by the Pegasos\n",
    "            algorithm before this update.\n",
    "        current_theta_0 - The current theta_0 being used by the\n",
    "            Pegasos algorithm before this update.\n",
    "\n",
    "    Returns: A tuple where the first element is a numpy array with the value of\n",
    "    theta after the current update has completed and the second element is a\n",
    "    real valued number with the value of theta_0 after the current updated has\n",
    "    completed.\n",
    "    \"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "adb4c2af",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pegasos_single_step_update(feature_vector,label,L,eta,current_theta,current_theta_0):\n",
    "\n",
    "    X=feature_vector\n",
    "    Y=label\n",
    "    w=current_theta\n",
    "    w0=current_theta_0\n",
    "\n",
    "\n",
    "    if (np.dot(X, w)+w0)*Y <= 1:\n",
    "                w = w*(1-L*eta) + X*Y*eta\n",
    "                w0 = w0 + Y*eta\n",
    "    else:\n",
    "                w = w*(1-L*eta)\n",
    "                w0 = w0\n",
    "              \n",
    "\n",
    "    return (w,w0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c191dfa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([], -1.5092644144074587)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a= pegasos_single_step_update( \n",
    "        [0.3794356,0.24692177,-0.45563576,-0.13701538,0.06302368,-0.25333105,0.35059787,0.3933498,0.19904044,-0.37787339],\n",
    "        -1,3,2,\n",
    "        [-0.05262619,-0.10782209,-0.39353927,0.45576348,0.38382044,-0.13437809,-0.47684956,0.21206966,-0.3226326,0.21971462],\n",
    "        0.4907355855925413)\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd332a8c",
   "metadata": {},
   "source": [
    "# Full Pegasos Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c205ec2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "  \"\"\"\n",
    "    Runs the Pegasos algorithm on a given set of data. Runs T\n",
    "    iterations through the data set, there is no need to worry about\n",
    "    stopping early.\n",
    "\n",
    "    For each update, set learning rate = 1/sqrt(t),\n",
    "    where t is a counter for the number of updates performed so far (between 1\n",
    "    and nT inclusive).\n",
    "\n",
    "    NOTE: Please use the previously implemented functions when applicable.\n",
    "    Do not copy paste code from previous parts.\n",
    "\n",
    "    Args:\n",
    "        feature_matrix - A numpy matrix describing the given data. Each row\n",
    "            represents a single data point.\n",
    "        labels - A numpy array where the kth element of the array is the\n",
    "            correct classification of the kth row of the feature matrix.\n",
    "        T - An integer indicating how many times the algorithm\n",
    "            should iterate through the feature matrix.\n",
    "        L - The lamba value being used to update the Pegasos\n",
    "            algorithm parameters.\n",
    "\n",
    "    Returns: A tuple where the first element is a numpy array with the value of\n",
    "    the theta, the linear classification parameter, found after T\n",
    "    iterations through the feature matrix and the second element is a real\n",
    "    number with the value of the theta_0, the offset classification\n",
    "    parameter, found after T iterations through the feature matrix.\n",
    "    \"\"\"\n",
    "    # Your code here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "492ded32",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_order(n_samples):\n",
    "    try:\n",
    "        with open(str(n_samples) + '.txt') as fp:\n",
    "            line = fp.readline()\n",
    "            return list(map(int, line.split(',')))\n",
    "    except FileNotFoundError:\n",
    "        random.seed(1)\n",
    "        indices = list(range(n_samples))\n",
    "        random.shuffle(indices)\n",
    "        return indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ab4a50e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pegasos(feature_matrix, labels, T, L):\n",
    "#def perceptron(feature_matrix, labels, T):\n",
    "    \n",
    "    X=feature_matrix\n",
    "    Y=labels\n",
    "    w = np.zeros(len(X[0]))\n",
    "    w0 = 0\n",
    "    counter= 0\n",
    "    (nvectors, dimensions) = feature_matrix.shape\n",
    "    for t in range(T):\n",
    "        #for i in get_order(feature_matrix.shape[0]):\n",
    "        #for i in range(feature_matrix.shape[0]):\n",
    "        for i in get_order(nvectors):        \n",
    "            counter=counter+1\n",
    "            eta = 1/np.sqrt(counter)\n",
    "            #w,w0=pegasos_single_step_update(X[i,:], Y[i],L, eta, w, w0)\n",
    "            w,w0=pegasos_single_step_update(X[i,:], Y[i],L, eta, w, w0)\n",
    "              \n",
    "        #for i, x in enumerate(X):\n",
    "               # if (np.dot(X[i],w)*Y[i]) <= 0:\n",
    "               #w = w + X[i]*Y[i]\n",
    "               #w0 = w0 + Y[i]\n",
    "#def pegasos_single_step_update(feature_vector,label,L,eta,current_theta,current_theta_0):\n",
    "    return (w,w0)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0c22d70",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[[0.1837462,0.29989789,-0.35889786,-0.30780561,-0.44230703,-0.03043835,0.21370063,0.33344998,-0.40850817,-0.13105809],\n",
    "[0.08254096,0.06012654,0.19821234,0.40958367,0.07155838,-0.49830717,0.09098162,0.19062183,-0.27312663,0.39060785],\n",
    "[-0.20112519,-0.00593087,0.05738862,0.16811148,-0.10466314,-0.21348009,0.45806193,-0.27659307,0.2901038,-0.29736505],\n",
    "[-0.14703536,-0.45573697,-0.47563745,-0.08546162,-0.08562345,0.07636098,-0.42087389,-0.16322197,-0.02759763,0.0297091],\n",
    "[-0.18082261,0.28644149,-0.47549449,-0.3049562,0.13967768,0.34904474,0.20627692,0.28407868,0.21849356,-0.01642202]]\n",
    "b=[-1,-1,-1,1,-1]\n",
    "a=np.array(a)\n",
    "b=np.array(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "be09f864",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([-0.09050719, -0.80411363, -0.38810134, -0.09977571, -0.18561846,\n",
       "         0.123388  , -0.78912673, -0.44091684, -0.07944001, -0.06070187]),\n",
       " -0.8316936528736744)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result=pegasos(a,b,10,0.1456692551041303)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "066a3b71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 10)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73bc55aa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
